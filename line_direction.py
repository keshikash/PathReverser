# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LineDirection
                                 A QGIS plugin
 This plugins reverses the direction of the selected lines.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Keshika Sharma
        email                : b22ee040@iitj.ac.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor, QFont
from qgis.PyQt.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .line_direction_dialog import LineDirectionDialog
import os.path

from PyQt5.QtWidgets import QListWidgetItem, QSizePolicy
from PyQt5.QtCore import Qt, QTimer

import math
from qgis.core import *
from qgis.PyQt.QtCore import QTimer, QVariant, QPointF, QSizeF
from qgis.gui import QgsMapToolEmitPoint


class LineDirection:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LineDirection_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Line Direction')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LineDirection', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/line_direction/plugin.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Reverse line direction'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.layer = QgsProject().instance().mapLayersByName("fiber_cable")[0]
        if not self.layer:
            self.iface.messageBar().pushWarning("Warning", "No valid layer selected!")
            return

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Line Direction'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        if self.first_start:
            self.first_start = False
            self.dlg = LineDirectionDialog()

            # Initialize state variables
            self.has_unsaved_changes = False
            self.warning_shown = False
            self.saved_geometries = {}
            self.in_selection_mode = False
            self._reset_triggered = False

            # Connect buttons
            self.dlg.btnSelectLines.clicked.connect(self.start_selection)
            self.dlg.btnConvert.clicked.connect(self.reverse_cables)
            self.dlg.btnReset.clicked.connect(self.reset_selection)
            self.dlg.btnSave.clicked.connect(self.save_changes)
            self.dlg.btnClose.clicked.connect(self.close_dialog)

            self.iface.mapCanvas().selectionChanged.connect(self.update_counter)
            self.dlg.lstFeatures.itemChanged.connect(self.on_item_checked)
            self.dlg.lstFeatures.itemChanged.connect(self.reset_warning_flag)

            if not hasattr(self, "original_sizes"):
                QTimer.singleShot(0, self.capture_original_widget_sizes)

        # Update these when showing the dialog
        self.dlg.lblFeatureCount.setText("0 lines selected")
        self.update_saved_state()  # Ensure we have current geometries
        self.original_geometries = {
            feat.id(): QgsGeometry(feat.geometry())
            for feat in self.layer.getFeatures()
        }
        self.dlg.show()

    def capture_original_widget_sizes(self):
        self.original_size = self.dlg.size()
        self.original_pos = self.dlg.pos()

    def reset_warning_flag(self, item):
        """Only reset the warning flag when there are no unsaved changes"""
        if not self.has_unsaved_changes:
            self.warning_shown = False

    def on_item_checked(self, item):
        """Show warning when changing checked items with unsaved changes"""
        if self.has_unsaved_changes and not self.warning_shown:
            #Message box
            msg_box = QMessageBox(self.dlg)
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setWindowTitle("Unsaved Changes")
            msg_box.setText("You have unsaved direction changes.")
            msg_box.setInformativeText("Click Save to confirm your changes.")

            #Save button (removes default OK button)
            msg_box.setStandardButtons(QMessageBox.Save)
            msg_box.setDefaultButton(QMessageBox.Save)

            #Connect the Save button
            msg_box.button(QMessageBox.Save).clicked.connect(self.save_changes)
            msg_box.exec_()

            self.warning_shown = True

    def on_selection_changed(self, selected, deselected, clear_and_select):
        """Handle layer selection changes to update direction indicators"""
        if self.layer:
            selected_features = self.layer.selectedFeatures()
            self.create_direction_indicator_layer(selected_features)

    def start_selection(self):
        """Begin interactive selection with labels placed neatly next to lines"""

        if not self.check_unsaved_changes():
            return

        self.dlg.showMinimized()
        self.in_selection_mode = True

        #Store original geometries (including directions) of ALL features
        self.original_geometries = {}
        for feature in self.layer.getFeatures():
            self.original_geometries[feature.id()] = QgsGeometry(feature.geometry())

        #Store original labeling settings
        if not hasattr(self, 'original_label_settings'):
            self.original_label_settings = {
                'enabled': self.layer.labelsEnabled(),
                'settings': self.layer.labeling().settings() if self.layer.labeling() else None
            }

        label_settings = QgsPalLayerSettings()

        #Use either fiber_name or id field
        label_field = "fiber_name" if "fiber_name" in self.layer.fields().names() else "id"
        label_settings.fieldName = label_field
        label_settings.enabled = True

        text_format = QgsTextFormat()
        text_format.setSize(10)  
        text_format.setColor(QColor(50, 50, 255))  # Dark blue for readability

        #background
        buffer = text_format.buffer()
        buffer.setEnabled(True)
        buffer.setSize(0.8)  
        buffer.setColor(QColor(255, 255, 255))  

        #Name of the fibre cable
        label_settings.placement = QgsPalLayerSettings.Curved  
        label_settings.dist = 1.5  
        label_settings.placementFlags = QgsPalLayerSettings.AboveLine | QgsPalLayerSettings.BelowLine  

        label_settings.displayAll = True
        label_settings.priority = 5
        label_settings.upsidedownLabels = True 

        text_format.setBuffer(buffer)
        label_settings.setFormat(text_format)
        self.layer.setLabeling(QgsVectorLayerSimpleLabeling(label_settings))
        self.layer.setLabelsEnabled(True)

        self.layer.triggerRepaint()
        self.iface.mapCanvas().refreshAllLayers()

        #Trigger selection mode
        self.iface.actionSelect().trigger()
        self.dlg.lblFeatureCount.setText("0 lines selected")

    def update_counter(self):
        if not self.in_selection_mode:
            return

        selected_feats = self.layer.selectedFeatures()
        count = len(selected_feats)
        self.dlg.lblFeatureCount.setText(f"{count} lines selected")

        if count > 0:
            self.dlg.lstFeatures.clear()
            for feat in selected_feats:
                fid = feat.id()
                name = feat["fiber_name"] if "fiber_name" in feat.fields().names() else "Unknown"
                item = QListWidgetItem(f" ID{fid} - {name}")
                item.setFlags(item.flags() | Qt.ItemIsUserCheckable)
                item.setCheckState(Qt.Unchecked)
                self.dlg.lstFeatures.addItem(item)

            self.adjust_list_widget_height()
            self.dlg.showNormal()
            # DON'T set in_selection_mode to False here
            self.iface.messageBar().pushInfo("Selection", f"{count} lines selected")
            self.create_direction_indicator_layer(selected_feats)
        else:
            self.clear_direction_indicators()

    def create_direction_indicator_layer(self, selected_features):
        """Creates/updates direction indicators for selected features"""
        if not selected_features or not self.layer or not self.layer.isValid():
            return

        #Clear existing indicators if they exist
        self.clear_direction_indicators()

        vl = QgsVectorLayer(f"LineString?crs={self.layer.crs().authid()}", "Direction Indicators", "memory")
        pr = vl.dataProvider()

        #Copy all selected features to the direction indicator layer
        features = []
        for feat in selected_features:
            new_feat = QgsFeature(vl.fields())
            new_feat.setGeometry(feat.geometry())
            features.append(new_feat)

        pr.addFeatures(features)
        vl.updateExtents()

        symbol = QgsLineSymbol()

        line_layer = QgsSimpleLineSymbolLayer()
        line_layer.setColor(QColor(0, 0, 255, 150))  # Semi-transparent blue
        line_layer.setWidth(2.0)
        symbol.changeSymbolLayer(0, line_layer)

        #Direction arrows
        arrow_layer = QgsMarkerLineSymbolLayer()
        arrow_layer.setPlacement(QgsMarkerLineSymbolLayer.Interval)
        arrow_layer.setInterval(15)  #Distance between arrows
        arrow_layer.setRotateSymbols(True)

        arrow_symbol = QgsMarkerSymbol()
        arrow_marker = QgsSimpleMarkerSymbolLayer()
        arrow_marker.setShape(QgsSimpleMarkerSymbolLayer.Triangle)
        arrow_marker.setColor(QColor(255, 0, 0))  
        arrow_marker.setSize(4)
        arrow_marker.setAngle(90)  

        arrow_symbol.appendSymbolLayer(arrow_marker)
        arrow_layer.setSubSymbol(arrow_symbol)
        symbol.appendSymbolLayer(arrow_layer)

        end_arrow_layer = QgsMarkerLineSymbolLayer()
        end_arrow_layer.setPlacement(QgsMarkerLineSymbolLayer.LastVertex)
        end_arrow_layer.setRotateSymbols(True)

        end_arrow_symbol = QgsMarkerSymbol()
        end_arrow_marker = QgsSimpleMarkerSymbolLayer()
        end_arrow_marker.setShape(QgsSimpleMarkerSymbolLayer.Triangle)
        end_arrow_marker.setColor(QColor(255, 0, 0))
        end_arrow_marker.setSize(6)
        end_arrow_marker.setAngle(90)
        end_arrow_symbol.appendSymbolLayer(end_arrow_marker)
        end_arrow_layer.setSubSymbol(end_arrow_symbol)
        symbol.appendSymbolLayer(end_arrow_layer)

        vl.setRenderer(QgsSingleSymbolRenderer(symbol))

        #Add to project above the original layer
        QgsProject.instance().addMapLayer(vl, False)
        root = QgsProject.instance().layerTreeRoot()
        node = root.findLayer(self.layer)
        if node:
            parent = node.parent()
            index = parent.children().index(node)
            parent.insertLayer(index + 1, vl)

        self.direction_indicator_layer = vl
        self.iface.mapCanvas().refresh()

    def clear_direction_indicators(self):
        """More reliable cleanup"""
        if hasattr(self, 'direction_indicator_layer'):
            try:
                QgsProject.instance().removeMapLayer(self.direction_indicator_layer.id())
            except:
                pass
            try:
                del self.direction_indicator_layer
            except:
                pass
        self.iface.mapCanvas().refresh()

    def adjust_list_widget_height(self):
        count = self.dlg.lstFeatures.count()
        if count == 0:
            self.dlg.lstFeatures.setMinimumHeight(0)
            self.dlg.lstFeatures.setMaximumHeight(0)
            return

        item_height = self.dlg.lstFeatures.sizeHintForRow(0)
        margin = 10
        max_visible_items = 25  #Don't show all 78 items if too many
        visible_items = min(count, max_visible_items)
        height = (item_height * visible_items) + margin

        self.dlg.lstFeatures.setMinimumHeight(height)
        self.dlg.lstFeatures.setMaximumHeight(height)

    def store_original_geometries(self):
        """Store original geometries of selected features, including their directions"""
        self.original_geometries = {}
        for feature in self.layer.selectedFeatures():
            #Store a copy of the original geometry
            self.original_geometries[feature.id()] = QgsGeometry(feature.geometry())

    def reverse_cables(self):
        """Reverse only checked cables from the list (ignore map selection)"""
        if not self.layer:
            self.iface.messageBar().pushCritical("Error", "No active layer.")
            return

        checked_ids = []
        for i in range(self.dlg.lstFeatures.count()):
            item = self.dlg.lstFeatures.item(i)
            if item.checkState() == Qt.Checked:
                text = item.text()
                try:
                    fid_part = text.split("ID")[1].split()[0]
                    fid = int(fid_part)
                    checked_ids.append(fid)
                except (IndexError, ValueError):
                    continue

        if not checked_ids:
            self.iface.messageBar().pushWarning("Warning", "No features checked!")
            return

        if not self.layer.isEditable():
            self.layer.startEditing()

        success = 0
        reversed_features = []  #Store features that were successfully reversed

        for fid in checked_ids:
            feat = self.layer.getFeature(fid)
            if not feat or not feat.hasGeometry():
                continue

            geom = feat.geometry()
            if geom.isEmpty():
                continue

            if geom.isMultipart():
                lines = geom.asMultiPolyline()
                reversed_lines = [list(reversed(line)) for line in lines]
                new_geom = QgsGeometry.fromMultiPolylineXY(reversed_lines)
            else:
                line = geom.asPolyline()
                if len(line) >= 2:
                    new_geom = QgsGeometry.fromPolylineXY(list(reversed(line)))
                else:
                    continue

            if self.layer.changeGeometry(fid, new_geom):
                success += 1
                #Store the reversed feature for updating direction indicators
                reversed_feature = QgsFeature(feat)
                reversed_feature.setGeometry(new_geom)
                reversed_features.append(reversed_feature)

        if success > 0:
            self.has_unsaved_changes = True  
            self.warning_shown = False 
            self.iface.messageBar().pushSuccess("Success",
                                                f"Reversed {success}/{len(checked_ids)} lines. Click Save to keep changes.")

            #Update the direction indicators for the reversed features
            if hasattr(self, 'direction_indicator_layer') and self.direction_indicator_layer:
                self.create_direction_indicator_layer(reversed_features)
                self.iface.mapCanvas().refresh()
            else:
                self.iface.messageBar().pushCritical("Error", "Failed to save changes.")
        else:
            self.iface.messageBar().pushWarning("Warning", "No lines were reversed.")


    def check_unsaved_changes(self):
        """Check if there are unsaved changes and show confirmation dialog"""
        if not getattr(self, 'has_unsaved_changes', False):
            return True 

        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setText("You have unsaved changes!")
        msg.setInformativeText("Do you want to save your changes?")
        msg.setWindowTitle("Unsaved Changes")
        msg.setStandardButtons(QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Save)

        ret = msg.exec_()
        if ret == QMessageBox.Save:
            return self.save_changes()  #Returns True if saved successfully
        elif ret == QMessageBox.Discard:
            self.has_unsaved_changes = False
            self.warning_shown = False  
            return True

        else: 
            return False  

    def reset_selection(self):
        """Reset selection and restore original labels and line directions"""
        if not self.check_unsaved_changes():
            return

        try:
            self.layer.startEditing()

            #Use saved geometries if available, otherwise use original geometries
            reset_geometries = self.saved_geometries if self.saved_geometries else self.original_geometries

            for fid, geom in reset_geometries.items():
                feature = self.layer.getFeature(fid)
                if feature.isValid():
                    current_geom = feature.geometry()
                    if not geom.equals(current_geom):
                        self.layer.changeGeometry(fid, geom)

            if self.layer.commitChanges():
                self.has_unsaved_changes = False
                self.warning_shown = False
                self.iface.messageBar().pushInfo("Reset", "Reset to last saved state.")

                self.layer.triggerRepaint()
                self.iface.mapCanvas().refresh()

                self.refresh_direction_indicators()  

        except Exception as e:
            self.layer.rollBack()
            self.iface.messageBar().pushCritical("Error", f"Reset failed: {str(e)}")

        #Restore original label settings if they exist
        if hasattr(self, 'original_label_settings'):
            if self.original_label_settings['settings']:
                self.layer.setLabeling(QgsVectorLayerSimpleLabeling(
                    self.original_label_settings['settings']))
            self.layer.setLabelsEnabled(self.original_label_settings['enabled'])

        #Continue with normal reset
        self._reset_triggered = False
        self.has_unsaved_changes = False
        self.warning_shown = False
        self.clear_direction_indicators()
        self._perform_reset()
        QTimer.singleShot(50, self._perform_reset)


    def _perform_reset(self):
        #First restore original geometries (including directions)
        if hasattr(self, "original_geometries") and self.original_geometries:
            try:
                self.layer.startEditing() 

                for fid, geom in self.original_geometries.items():
                    feature = self.layer.getFeature(fid)
                    if not feature.isValid():
                        continue

                    #Get the stored original geometry
                    original_geom = QgsGeometry(geom)

                    #Only update if the feature exists and geometry is different
                    current_geom = feature.geometry()
                    if not original_geom.equals(current_geom):
                        self.layer.changeGeometry(fid, original_geom)

                if not self.layer.commitChanges():
                    raise Exception("Could not commit changes")

            except Exception as e:
                self.layer.rollBack()
                self.iface.messageBar().pushCritical("Error", f"Could not reset directions: {str(e)}")
                return 

            finally:
                #Clear the stored geometries whether successful or not
                if hasattr(self, "original_geometries"):
                    del self.original_geometries

        self.layer.removeSelection()
        self.iface.mapCanvas().refresh()

        self.dlg.lblFeatureCount.setText("0 fiber cables selected")
        self.dlg.lstFeatures.clear()

        self.layer.setRenderer(QgsSingleSymbolRenderer(QgsLineSymbol()))
        self.layer.triggerRepaint()

        if not self._reset_triggered:
            self._reset_triggered = True
            self.iface.actionPan().trigger()
            self.iface.messageBar().pushInfo("Reset", "Selection and line directions restored.")

    def update_saved_state(self):
        """Update the saved_geometries to match the current layer state"""
        self.saved_geometries = {
            feat.id(): QgsGeometry(feat.geometry())
            for feat in self.layer.getFeatures()
            if feat.hasGeometry()
        }

    def refresh_direction_indicators(self):
        """Refresh arrows to reflect the saved state"""
        if hasattr(self, 'direction_indicator_layer'):
            selected = self.layer.selectedFeatures()
            if selected:
                self.create_direction_indicator_layer(selected)

    def save_changes(self):
        """Save changes to the layer including line directions"""
        if not self.layer.isEditable():
            self.iface.messageBar().pushInfo("Info", "No active edits to save.")
            return True

        try:
            if not self.layer.isEditable():
                self.layer.startEditing()

            if self.layer.commitChanges():
                #Update saved geometries to current state
                self.saved_geometries = {
                    feat.id(): QgsGeometry(feat.geometry())
                    for feat in self.layer.getFeatures()
                }

                self.update_saved_state()  
                self.refresh_direction_indicators()  
                self.original_geometries = dict(self.saved_geometries) 

                self.iface.messageBar().pushSuccess("Saved", "Changes saved successfully.")
                self.has_unsaved_changes = False
                self.warning_shown = False
                return True

            
            self.layer.startEditing() 

            with edit(self.layer):
                for feature in self.layer.getFeatures():
                    self.layer.changeGeometry(feature.id(), feature.geometry())

            if self.layer.commitChanges():
                self.update_saved_state()  # Update saved geometries
                self.refresh_direction_indicators()  
                self.original_geometries = dict(self.saved_geometries)

                self.iface.messageBar().pushSuccess("Saved", "Changes saved successfully.")
                self.has_unsaved_changes = False
                self.warning_shown = False  #Reset flag after successful save
                return True

            # If we still have errors, provide detailed feedback
            commit_errors = self.layer.commitErrors()
            if commit_errors:
                error_msg = "\n".join(commit_errors[-3:]) 
            else:
                error_msg = "Unknown commit error"

            self.iface.messageBar().pushCritical(
                "Error",
                f"Failed to save changes:\n{error_msg}\nCheck data permissions and storage format."
            )
            return False

        except Exception as e:
            self.iface.messageBar().pushCritical(
                "Error",
                f"Save error: {str(e)}\nTry saving to a different format like GeoPackage."
            )
            self.layer.rollBack()
            return False


    def close_dialog(self):
        """Close the dialog after checking for unsaved changes"""
        if not self.check_unsaved_changes():
            return  
        # If we get here, either:
        # 1. There were no unsaved changes, or
        # 2. User chose to save/discard changes
        self.cleanup()
        self.dlg.close()
        self.first_start = True

    def cleanup(self):
        """Clean up resources and reset state"""
        try:
            #Disconnect Buttons
            self.iface.mapCanvas().selectionChanged.disconnect(self.update_counter)
            self.dlg.btnSelectLines.clicked.disconnect()
            self.dlg.btnConvert.clicked.disconnect()
            self.dlg.btnReset.clicked.disconnect()
            self.dlg.btnSave.clicked.disconnect()
            self.dlg.btnClose.clicked.disconnect()
            self.dlg.lstFeatures.itemChanged.disconnect()
        except Exception:
            pass

        #Clear visual elements
        self.clear_direction_indicators()
        self.layer.removeSelection()

        self.in_selection_mode = False
        self.has_unsaved_changes = False
        self.warning_shown = False

        if hasattr(self, 'original_label_settings'):
            if self.original_label_settings['settings']:
                self.layer.setLabeling(QgsVectorLayerSimpleLabeling(
                    self.original_label_settings['settings']))
            self.layer.setLabelsEnabled(self.original_label_settings['enabled'])

        #Refresh display
        self.iface.mapCanvas().refreshAllLayers()